<?xml version="1.0" encoding="UTF-8"?>
<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
-->

<xwikidoc>
  <web>EESCCode</web>
  <name>GroovyAddRights</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <parent>Main.WebHome</parent>
  <creator>xwiki:XWiki.Admin</creator>
  <author>xwiki:XWiki.Admin</author>
  <customClass/>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <creationDate>1395391855000</creationDate>
  <date>1396261421000</date>
  <contentUpdateDate>1396261421000</contentUpdateDate>
  <version>1.1</version>
  <title/>
  <defaultTemplate/>
  <validationScript/>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>true</hidden>
  <content>//{{groovy}}
import java.util.Arrays
import java.util.List
import java.util.LinkedList
import org.apache.commons.lang.StringUtils

private List checkList(list, objectname) {
  def resultList = []
  for(element in list) {
    def documentref = services.model.resolveDocument(element)
    def document = xwiki.getDocument(documentref)
    if(document.getObjects(objectname).size()) {
      resultList.add(element)
    }
  }
  return resultList
}

private String getShareStatus(rightobjs) {
  if(rightobjs.size() == 1) {
    return "private"
  } else if(rightobjs.size() == 2) {
    return "public"
  } else if(rightobjs.size() == 3) {
    return "shared"
  }
  return "undefined"
}

private void addShareDocument(documentname, toaddlist) {
  for(toadd in toaddlist) {
    def toaddref = services.model.resolveDocument(toadd)
    def toaddpage = xwiki.getDocument(toaddref)
    def shareobj = toaddpage.getObject("EESCCode.ShareListClass", true)
    def sharelist = new LinkedList&lt;String&gt;(Arrays.asList(shareobj.get("shareList").split("\\|")))
    if(!sharelist.contains(documentname)) {
      sharelist.add(documentname)
      shareobj.set("shareList", StringUtils.join(sharelist, "|"))
      toaddpage.save()
    }
  }
}

private void removeShareDocument(documentname, toremovelist) {
  for(toremove in toremovelist) {
    def toremoveref = services.model.resolveDocument(toremove)
    def toremovepage = xwiki.getDocument(toremoveref)
    def shareobj = toremovepage.getObject("EESCCode.ShareListClass", true)
    def sharelist = new LinkedList&lt;String&gt;(Arrays.asList(shareobj.get("shareList").split("\\|")))
    if(sharelist.contains(documentname)) {
      sharelist.remove(documentname)
      shareobj.set("shareList", StringUtils.join(sharelist, "|"))
      toremovepage.save()
    }
  }
}

private void updateRights(document, rights, users, groups) {
  def oldrights = ""
  def oldusers = []
  def oldgroups = []
  def oldrightobjs = document.getObjects("XWiki.XWikiRights")
  def documentname = document.fullName

  oldrights = getShareStatus(oldrightobjs)
  if(oldrights.equals("public")) {
    oldgroups.add("XWiki.ENTAllGroup")
  } else if(oldrights.equals("shared")) {
    oldusers.addAll(oldrightobjs.get(1).getProperty("users").value.split(","))
    oldgroups.addAll(oldrightobjs.get(2).getProperty("groups").value.split(","))
  }

  removeShareDocument(documentname, oldusers)
  addShareDocument(documentname, users)
  addShareDocument(documentname, [document.creator])
  removeShareDocument(documentname, oldgroups)
  addShareDocument(documentname, groups)
  if(rights.equals("public")) {
    addShareDocument(documentname, ["XWiki.ENTAllGroup"])
  }
}

private void addXWikiRightsObject(document, allow, users, groups, levels) {
  def rightobj = document.newObject("XWiki.XWikiRights")
  rightobj.set("allow", allow)
  rightobj.set("users", users)
  rightobj.set("groups", groups)
  rightobj.set("levels", levels)
}

public void shareDocument(documentref, rights, users, groups, context) {
  xcontext = context.get(0)
  xwiki = context.get(1)
  services = context.get(2)

  users = checkList(users, "XWiki.XWikiUsers")
  groups = checkList(groups, "XWiki.XWikiGroups")

  def document = xwiki.getDocument(documentref)
  document.save()

  updateRights(document, rights, users, groups)
  document.setParent("Main.WebHome") // Every document has Main.WebHome as a parent for navigation purpose (breadcumb)

  document.removeObjects("XWiki.XWikiRights")
  addXWikiRightsObject(document, 1, document.creator, "", "view,edit,delete")
  if(rights.equals("public")) {
    addXWikiRightsObject(document, 1, "", "XWiki.ENTAllGroup", "view,edit")
  } else if (rights.equals("shared")) {
    addXWikiRightsObject(document, 1, StringUtils.join(users, ","), "", "view,edit")
    addXWikiRightsObject(document, 1, "", StringUtils.join(groups, ","), "view,edit")
  }
  document.save()
}

public void deleteDocumentRights(documentref, context) {
  xcontext = context.get(0)
  xwiki = context.get(1)
  services = context.get(2)

  def document = xwiki.getDocument(documentref)
  def documentname = document.fullName
  def rightobjs = document.getObjects("XWiki.XWikiRights")

  for(rightobj in rightobjs) {
    def users = Arrays.asList(rightobj.getProperty("users").value.split(","))
    removeShareDocument(documentname, users)
    def groups = Arrays.asList(rightobj.getProperty("groups").value.split(","))
    removeShareDocument(documentname, groups)
  }
}
//{{/groovy}}</content>
</xwikidoc>
