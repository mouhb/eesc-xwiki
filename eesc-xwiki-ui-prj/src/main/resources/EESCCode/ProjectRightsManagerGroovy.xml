<?xml version='1.0' encoding='UTF-8'?>
<xwikidoc version="1.1">
  <web>EESCCode</web>
  <name>ProjectRightsManagerGroovy</name>
  <language/>
  <defaultLanguage>fr</defaultLanguage>
  <translation>0</translation>
  <creator>XWiki.Admin</creator>
  <creationDate>1416217009000</creationDate>
  <author>XWiki.Admin</author>
  <contentAuthor>XWiki.Admin</contentAuthor>
  <date>1416470305000</date>
  <contentUpdateDate>1416470289000</contentUpdateDate>
  <version>1.353</version>
  <title/>
  <comment/>
  <minorEdit>true</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>false</hidden>
  <content>/** &#xd;
* @Author : Mohamed BOUSSAA&lt;mohamed.boussaa@xwiki.com>&#xd;
* Managing projects and tasks rights&#xd;
*/&#xd;
import com.xpn.xwiki.api.Util;&#xd;
class ProjectRightsManager{&#xd;
def xwiki;&#xd;
def context;&#xd;
def XWikiContext;&#xd;
def services;&#xd;
def util;&#xd;
&#xd;
void init(xwiki, context, services) {&#xd;
  try {&#xd;
    this.xwiki = xwiki;    &#xd;
    this.context = context;&#xd;
    this.services = services;&#xd;
    this.util = new Util(xwiki.getXWiki(),context.getContext());&#xd;
  }&#xd;
  catch (Exception e) {&#xd;
  }&#xd;
}&#xd;
&#xd;
/**&#xd;
* Get project rights&#xd;
*&#xd;
* @param projectDocRef : project docFullName&#xd;
* @return HashMap : This methode return a HashMap object containing the creator of the project, users and groups allowed to edit and the users and groups allowed to view the project&#xd;
*/&#xd;
def getProjectRights(projectDocRef){&#xd;
  try {&#xd;
    def editUsers = new ArrayList();&#xd;
    def editGroups = new ArrayList();&#xd;
    def viewUsers = new ArrayList();&#xd;
    def viewGroups = new ArrayList();&#xd;
    def projectCreator = "";&#xd;
    def rep = new HashMap();&#xd;
    if(projectDocRef &amp;&amp; projectDocRef != "" &amp;&amp; xwiki.exists(projectDocRef)){&#xd;
       def project = xwiki.getDocument(projectDocRef);&#xd;
       if(project){&#xd;
          projectCreator = project.creator;&#xd;
          //Get edit users and groups&#xd;
          def editRights = project.getObjects('XWiki.XWikiRights','levels','view,edit');&#xd;
          if(editRights &amp;&amp; editRights.size() > 0){&#xd;
            for(rightObj in editRights){&#xd;
              def user = rightObj.getProperty('users').value;&#xd;
              def group = rightObj.getProperty('groups').value;&#xd;
              if(user &amp;&amp; !user.equals('')){&#xd;
                if(!user.equals(projectCreator)){&#xd;
                   editUsers.add(user);&#xd;
                }&#xd;
              }&#xd;
             else if(group &amp;&amp; !group.equals('')){&#xd;
               editGroups.add(group);&#xd;
             }&#xd;
            }&#xd;
          }&#xd;
          //Get view users and groups&#xd;
          def viewRights = project.getObjects('XWiki.XWikiRights','levels','view');&#xd;
          if(viewRights &amp;&amp; viewRights.size() > 0){&#xd;
            for(rightObj in viewRights){&#xd;
              def user = rightObj.getProperty('users').value;&#xd;
              def group = rightObj.getProperty('groups').value;&#xd;
              if(user &amp;&amp; !user.equals('')){&#xd;
                if(!user.equals(projectCreator)){&#xd;
                   viewUsers.add(user);&#xd;
                }&#xd;
              }&#xd;
             else if(group &amp;&amp; !group.equals('')){&#xd;
               viewGroups.add(group);&#xd;
             }&#xd;
            }&#xd;
          }&#xd;
       }&#xd;
    }&#xd;
    rep.put("projectCreator",projectCreator);&#xd;
    rep.put("editUsers",editUsers);&#xd;
    rep.put("editGroups",editGroups);&#xd;
    rep.put("viewUsers",viewUsers);&#xd;
    rep.put("viewGroups",viewGroups);&#xd;
    return rep;&#xd;
    } &#xd;
  catch (Exception e) {&#xd;
  }&#xd;
}&#xd;
&#xd;
/**&#xd;
* Get project tasks&#xd;
*&#xd;
* @param projectDocRef : project docFullName&#xd;
* @return List : Returns project tasks&#xd;
*/&#xd;
def getProjectTasks(projectDocRef){&#xd;
  try {&#xd;
        def query = "SELECT DISTINCT doc.fullName FROM XWikiDocument doc, BaseObject obj, StringProperty sp WHERE obj.name=doc.fullName AND obj.className='TaskManager.TaskManagerClass' AND obj.id.id=sp.id AND sp.name='project' and sp.value='"+ projectDocRef +"'";&#xd;
       def results = services.query.xwql(query).execute();&#xd;
       return results;&#xd;
  } &#xd;
  catch (Exception e) {&#xd;
  }&#xd;
}&#xd;
&#xd;
/**&#xd;
* Set project tasks rights : give the same right of the project to its tasks&#xd;
*&#xd;
* @param projectDocRef : project docFullName&#xd;
*/&#xd;
void setProjectTasksRights(projectDocRef){&#xd;
  try {&#xd;
       if(projectDocRef &amp;&amp; projectDocRef != "" &amp;&amp; xwiki.exists(projectDocRef)){&#xd;
           def projectRights = this.getProjectRights(projectDocRef);&#xd;
           if(projectRights){&#xd;
               def projectTasks = this.getProjectTasks(projectDocRef);&#xd;
               //Set the project creator right on the task&#xd;
               def editUsers = projectRights.get("editUsers");&#xd;
               def editGroups = projectRights.get("editGroups");&#xd;
               def viewUsers = projectRights.get("viewUsers");&#xd;
               def viewGroups = projectRights.get("viewGroups");&#xd;
               if(projectTasks &amp;&amp; projectTasks.size() > 0){&#xd;
                   for(task in projectTasks){&#xd;
                      setTaskRights(task, projectRights);&#xd;
                   }&#xd;
               }&#xd;
           }&#xd;
       }&#xd;
  } &#xd;
  catch (Exception e) {&#xd;
  }&#xd;
}&#xd;
&#xd;
/**&#xd;
* Set task rights : Task manager, task creator and project leader have view,edit,delete rights on the task&#xd;
* @param taskDocRef : Task document reference&#xd;
* @param projectDocRef : Project document reference of the task&#xd;
* @param taskManager : Manager of the task&#xd;
* @param taskMembers : Members of the task&#xd;
*/&#xd;
void setTaskRights(taskDocRef, projectRights, taskManager = null, taskMembers = null){&#xd;
  try {&#xd;
      if(taskDocRef &amp;&amp; taskDocRef != "" &amp;&amp; xwiki.exists(taskDocRef)){&#xd;
           def task = xwiki.getDocument(taskDocRef); &#xd;
           if(task){&#xd;
               //Remove old rights objects&#xd;
               task.removeObjects('XWiki.XWikiRights');&#xd;
               //Rights of the task creator&#xd;
               if(task.creator &amp;&amp; task.creator != "" &amp;&amp; xwiki.exists(task.creator)){&#xd;
                  def object = task.newObject('XWiki.XWikiRights');&#xd;
                  object.set('users', task.creator);&#xd;
                  object.set('groups', '');&#xd;
                  object.set('levels', 'view,edit,delete,creator');&#xd;
                  object.set('allow', 'true');&#xd;
               }&#xd;
               //Rights of the task manager&#xd;
               //If the taskManger is null get it from the task object&#xd;
               if(!taskManager){&#xd;
                     taskManager = task.getValue("assignee");&#xd;
                     if(!taskMembers){&#xd;
                          def memberskObj = task.getObject("EESCCode.TaskManagerMembersClass");&#xd;
                          if(memberskObj){ &#xd;
                             def taskMembersStr = memberskObj.getValue('assignees');&#xd;
                             if(taskMembersStr &amp;&amp; taskMembersStr != ""){&#xd;
                                taskMembers = taskMembersStr.split(",");&#xd;
                             }&#xd;
                          }&#xd;
                     }&#xd;
               }&#xd;
               if(taskManager &amp;&amp; taskManager != "" &amp;&amp; xwiki.exists(taskManager)){&#xd;
                  def object = task.newObject('XWiki.XWikiRights');&#xd;
                  object.set('users', taskManager);&#xd;
                  object.set('groups', '');&#xd;
                  object.set('levels', 'view,edit,delete');&#xd;
                  object.set('allow', 'true');&#xd;
               }&#xd;
               //Rights of the Task Members&#xd;
               if(taskMembers &amp;&amp; taskMembers.size() > 0){&#xd;
                  for(user in taskMembers){&#xd;
                     def object = task.newObject('XWiki.XWikiRights');&#xd;
                     object.set('users', user);&#xd;
                     object.set('groups', '')&#xd;
                     object.set('levels', "view,edit");&#xd;
                     object.set('allow', 'true')                 &#xd;
                  }&#xd;
               }&#xd;
              &#xd;
               //Rights of the project members&#xd;
               if(projectRights &amp;&amp; projectRights.size() > 0){&#xd;
                  //Rights of the project creator&#xd;
                  if(projectRights.get("projectCreator") &amp;&amp; projectRights.get("projectCreator") != "" &amp;&amp; xwiki.exists(projectRights.get("projectCreator"))){&#xd;
                     def object = task.newObject('XWiki.XWikiRights');&#xd;
                     object.set('users', projectRights.get("projectCreator"));&#xd;
                     object.set('groups', '');&#xd;
                     object.set('levels', 'view,edit,delete');&#xd;
                     object.set('allow', 'true');&#xd;
                  }&#xd;
                  //Set edit users rights&#xd;
                  if(projectRights.get("editUsers") &amp;&amp; projectRights.get("editUsers").size() > 0){&#xd;
                     for(user in projectRights.get("editUsers")){&#xd;
                        if(user &amp;&amp; user != "" &amp;&amp; xwiki.exists(user)){&#xd;
                           def object = task.newObject('XWiki.XWikiRights');&#xd;
                           object.set('users', user);&#xd;
                           object.set('groups', '')&#xd;
                           object.set('levels', "view");&#xd;
                           object.set('allow', 'true');                 &#xd;
                        }&#xd;
                     }&#xd;
                  }&#xd;
                  //Set edit groups rights&#xd;
                  if(projectRights.get("editGroups") &amp;&amp; projectRights.get("editGroups").size() > 0){&#xd;
                     for(group in projectRights.get("editGroups")){&#xd;
                        if(group &amp;&amp; group != "" &amp;&amp; xwiki.exists(group)){&#xd;
                           def object = task.newObject('XWiki.XWikiRights');&#xd;
                           object.set('users', '');&#xd;
                           object.set('groups', group)&#xd;
                           object.set('levels', "view");&#xd;
                           object.set('allow', 'true');&#xd;
                        }                 &#xd;
                     }&#xd;
                  }&#xd;
                  //Set view users rights&#xd;
                  if(projectRights.get("viewUsers") &amp;&amp; projectRights.get("viewUsers").size() > 0){&#xd;
                     for(user in projectRights.get("viewUsers")){&#xd;
                        if(user &amp;&amp; user != "" &amp;&amp; xwiki.exists(user)){&#xd;
                           def object = task.newObject('XWiki.XWikiRights');&#xd;
                           object.set('users', user);&#xd;
                           object.set('groups', '')&#xd;
                           object.set('levels', "view");&#xd;
                           object.set('allow', 'true');&#xd;
                        }                 &#xd;
                     }&#xd;
                  }&#xd;
                  //Set view groups rights&#xd;
                  if(projectRights.get("viewGroups") &amp;&amp; projectRights.get("viewGroups").size() > 0){&#xd;
                     for(group in projectRights.get("viewGroups")){&#xd;
                        if(group &amp;&amp; group != "" &amp;&amp; xwiki.exists(group)){&#xd;
                           def object = task.newObject('XWiki.XWikiRights');&#xd;
                           object.set('users', '');&#xd;
                           object.set('groups', group)&#xd;
                           object.set('levels', "view");&#xd;
                           object.set('allow', 'true');&#xd;
                        }                 &#xd;
                     }&#xd;
                  }&#xd;
                }&#xd;
                task.save();&#xd;
            }&#xd;
       }&#xd;
  } &#xd;
  catch (Exception e) {&#xd;
  }&#xd;
}&#xd;
&#xd;
}//End of class</content>
</xwikidoc>